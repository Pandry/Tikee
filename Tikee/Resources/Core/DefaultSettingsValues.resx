<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddictionMode" xml:space="preserve">
    <value>false</value>
  </data>
  <data name="ConfigFileContent" xml:space="preserve">
    <value># This is the default configuration file generated by Tikee
# Author: Pandry &lt;https://github.com/Pandry&gt;
# URL: https://github.com/Pandry/Tikee

# The Tresholds section refers to the value of the treshold idle counter and the pause lenght after wich the timer will reset itself
[Tresholds]
# DefaultTimerDuration is the default timer lenght
#  The format is supposed to be HH:mm:ss
#  Default: 01:00:00
DefaultTimerDuration = 01:00:00

# PauseTreshold is the pause lenght. Medics recommend 15 minutes break every hour.
#  The format is supposed to be HH:mm:ss
#  Default: 00:15:00
PauseTreshold = 00:15:00

# IdleDisplayTreshold is the threshold that will show the current idle time 
#  Default: 00:00:40
IdleDisplayTreshold = 00:00:40


# The UI refers to the UI values of the program
#  It is based on hex triplet format (learn more about it here: https://en.wikipedia.org/wiki/Web_colors)
#  The hex triplet format is follows this schema (without the spaces between the number couple):  (# 12 34 56) 
#                                                                                                     ║  ║  ║
#                                                 Red value expressed in bytes (range: 00 to FF)     ═╝  ║  ║
#                                                    Green value expressed in bytes (range: 00 to FF)   ═╝  ║
#                                                       Blue value expressed in bytes (range: 00 to FF)    ═╝
#  So the color will be #123456
#  You can find online a lot of color palettes;
#  Here some links:
#  https://flatuicolors.com/
#  https://colorhunt.co/
#  https://colorhunt.co/palette/132247
[UI]

###
## Background colors
###

# TimerRunningBackground referes to the background color of the window when the timer is running
#  Default: #26de81
TimerRunningBackground = #26de81;

# IdleBackground referes to the background color of the window when the user is supposed to be away (the mouse doesn't move from a presetted treshold)
IdleBackground = #3867d6;

# TimeOverBackground referes to the background color of the window when the time is over and the user is supposed to take a break
TimeOverBackground = #ff4757;

# DefaultBackground referes to the background color of the window when the timer is stopped
DefaultBackground= #4b6584 

###
## Text elements
###

# UIColor referes to the foreground color (cool name for ""text color"") of the UI elements
UIColor = #eee</value>
    <comment>This is the default configuration file and is used when the need for a new configuratoion file arises.</comment>
  </data>
  <data name="ConfigFileName" xml:space="preserve">
    <value>Tikee.ini</value>
    <comment>The default config file name</comment>
  </data>
  <data name="DefaultPauseString" xml:space="preserve">
    <value>00:00:01</value>
    <comment>Default 00:15:00</comment>
  </data>
  <data name="DefaultTimeString" xml:space="preserve">
    <value>01:00:00</value>
    <comment>Default 01:00:00</comment>
  </data>
  <data name="IdleDisplayTresholdString" xml:space="preserve">
    <value>00:00:03</value>
    <comment>Default 00:00:40</comment>
  </data>
</root>